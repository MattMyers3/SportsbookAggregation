// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsbookAggregation.Data;

namespace SportsbookAggregation.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200910002420_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportsbookAggregation.Data.Models.GamblingSite", b =>
                {
                    b.Property<Guid>("GamblingSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GamblingSiteId");

                    b.ToTable("GamblingSite");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwayTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HomeTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.GameLine", b =>
                {
                    b.Property<Guid>("GameLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwayMoneyLinePayout")
                        .HasColumnType("int");

                    b.Property<int?>("AwaySpreadPayout")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentOverUnder")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentSpread")
                        .HasColumnType("float");

                    b.Property<Guid>("GamblingSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HomeMoneyLinePayout")
                        .HasColumnType("int");

                    b.Property<int?>("HomeSpreadPayout")
                        .HasColumnType("int");

                    b.Property<double?>("OpeningOverUnder")
                        .HasColumnType("float");

                    b.Property<double?>("OpeningSpread")
                        .HasColumnType("float");

                    b.Property<int?>("OverPayOut")
                        .HasColumnType("int");

                    b.Property<int?>("UnderPayout")
                        .HasColumnType("int");

                    b.HasKey("GameLineId");

                    b.HasIndex("GamblingSiteId");

                    b.HasIndex("GameId");

                    b.ToTable("GameLine");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.GameResult", b =>
                {
                    b.Property<Guid>("GameResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("int");

                    b.HasKey("GameResultId");

                    b.HasIndex("GameId");

                    b.ToTable("GameResult");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mascot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId");

                    b.HasIndex("SportId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.GameLine", b =>
                {
                    b.HasOne("SportsbookAggregation.Data.Models.GamblingSite", "GamblingSite")
                        .WithMany()
                        .HasForeignKey("GamblingSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsbookAggregation.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.GameResult", b =>
                {
                    b.HasOne("SportsbookAggregation.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsbookAggregation.Data.Models.Team", b =>
                {
                    b.HasOne("SportsbookAggregation.Data.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
